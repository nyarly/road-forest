NullFocus
  Empty results from GraphFoci should result in a special focus that is "null"
  should be empty? nil? blank? ...
  Other methods should raise an error that "pattern/query" on "graph/focus" resulted in an empty result

Cross model interactions:
  Get the graph for a particular model (see Front-loading)
  PUT/POST to create by generating ids and back-ending request to the other
  model - requires Param manipulation

Front-loading:
  Credence chain that supports non-authoritative statements
    if authority is absent
    if old authority agrees with non-authoritative

  Deerpath for front-loading: get graph from other resources, pull statements
  by pattern and include them into this graph.

RDFa + HTML support:
  Implement the POST RDF representation per http://www.lsrn.org/semweb/rdfpost.html
  Review the existing RDF::RDFa gem - how the hash of HAML templates works especially
  Consider RDFa helpers for HAML.
  Valise based template searching

"Strict" vocabularies:
  Vocab classes that have an RDFS document (in addition to their prefix and
  URL), from which they can load properties and classes, but also the human
  descriptions etc.
  Tools to pull the document from it's source.
  Tools to help edit new RDFS?
  Integration with RDFa templates

Pagination:
  A pagination vocab:
    the rdf:List of items on this page - last item goes to next page
    the IRI of the subject that links here
    the page:SkipList of pages
    the page:totalcount of list items ...
  Backend tools to build cacheable pages - including overlapping first page,
  and pages that know to go to "cache forever"

Client error exceptions
  40x -> per code exception classes, include Response content

Cached Rigor
  A "stale records" investigator
  Rigor that relies on it - useful for initial state before we hit the n/w

Inference investigator
  Look for statements that could be used to infer a response to current pattern
  Insert inferred statements
  Relies on RDFS/OWL

Other concerns:
Authentication
Authorization
Content encoding (gzip, compress)
Charsets
Languages
Exception handling

HTML related:
  Method coercion (POST that means DELETE/PUT)
  Params -> graph
  Form rendering
  Limited fan-out of received data - e.g. file uploads to forms
  rdfpost reader + RDFa helpers

Cacheing - last_modified, expires
  Cache-control headers (WM PR)

property delete

property replace

repo autovacuum

BGP queries should be solveable *across* resources - currently all patterns get
a :context variable applied that all have to match, but it seems reasonable
that multiple resources might participate in a solution. - might now work:
needs tests

HTTP behaviors:
Handling status codes -
  Empty vs. full responses (200 v 204)
  3xx and Location following
  4xx - sometimes correctable, otherwise...
  5xx

Strict Vocabularies: use the Vocab URL to pull the RDFS (or OWL?) description
of the vocab and define properties in the vocab that way. Also, use human
descriptions for fields in RDFa, for instance.

Error Handling
  Specifically, when the server returns 500, a RemoteHost#<act>ing starts
  returning nils - which is super confusing. On the other hand, it's not
  completely clear how to handle server errors yet (or any HTTP error...) Maybe
  collect them, and in the course of anything annealed, enrich exceptions with
  a notice that "There are 3 500 errors - access them with
  RemoteHost#current_errors" or something.

  When a representation doesn't contain statements about the requested
  resource, that's an error that should be reported. (Excon adds a / to empty
  paths...)

*** API challenges ***

Client behavior should get packed up in a tidy bunch of chains and blocks, but
if there's an error, Ruby's default exceptions aren't helpful.  NullObjects of
some kind?

Remove the _:local context - it doesn't make sense on the GM. Writes to a GM
should come from 3 places:

 * A GraphFocus, that has an implicit context to write to.
 * Raw #insert by client code - in which case, vaya con Dios
 * #insert_document, which has an explicit context to write to.

GM's should also accept non-ResourceQuery|Patterns. Simple to RQ|P.from(q|p),
with infered contexts.

Infered contexts raises this interesting point: every pattern potentially has 6
contexts to consider as credible:

 * Its context
 * Its subject
 * Its object
 * Contexts mentioned in its query
 * Subjects mentioned in its query
 * Objects mentioned in its query

(Not every pattern will have all 6) (Also - more than one of any may result in
an empty result - a Query with two contexts I *think* means "statements must
have this context and that context" which is impossible.)

That said, these resources might then form the basis of a credence review


*** Pure Mad Science ***

Omniscient test server.

Basically: RemoteHost collects the requests that get made and records them.
Play against server, and then "flatten" resulting meta-graph. TestServer simply
replies to everything with flattened graph - possibly changing state (graph) on
PUT/POST/DELETE.

Two sets of test files:

client -> server requests, the responses of which can be tested and recorded

server -> client responses, used as fixtures for client tests - right things
displayed / correct POSTs made.


Single Graph Update
 -- reflection indicates this should be removed. It's not really RESTful, and
 the use case (the converse of front loading) actually doesn't seem to make
 sense. "Batch" or "transaction" updates really should be collected into a new
 resource, if it makes sense. If it doesn't you probably don't really want that
 kind of update anyway


Statistical Front Loading
based on human definitions of resource graphs, and
emperical collection of client behavior (e.g. GET resourceB, Referer:
resourceA, (X-)Triggering-Property: propC), determine properties to front-load
into requests for resourceA to reduce the likelihood of subsequent request for
B. Contributing factors include the size of the extra data, impact on cacheing,
actual impact on subsequent requests (since propC shadows some non-negative
number of other properties we need about resourceB.)

Consider case of an list of users page - client wants names and roles for all
users. So UserList -> User1,User2,User3 etc because of foaf:name and also
authn:role. Once we front load both foaf:name and authn:name, UserList ->
User17, because that's the particular user we want. But: foaf:name makes not
impact by itself (except to change the triggering property), and both aren't an
absolute impact. On the other extreme, front-loading everything from User into
UserList probably stops requests for User17, but the network transfer is
greater as a result.

Certainly, there's a tendancy for everything to be front loaded, and as clients
change we might need to experimentally roll back a front-loading to see if that
triggers more requests.
